{"version":3,"sources":["ChannelList.js","MessageInput.js","ChatWindow.js","UserNamePrompt.js","App.js","reportWebVitals.js","index.js"],"names":["ChannelList","_ref","channels","setChannel","React","createElement","className","length","map","channel","key","id","onClick","console","log","name","MessageInput","onSendMessage","channelName","message","setMessage","useState","type","placeholder","value","onChange","e","target","handleSend","trim","ChatWindow","userName","messages","setMessages","loading","setLoading","error","setError","seenUsers","setSeenUsers","API_URL","endpoint","replace","useEffect","async","response","axios","get","headers","Authorization","authkey","data","fetchMessages","savedMessages","localStorage","getItem","JSON","parse","formatMessage","authKey","setItem","stringify","msg","index","sender","dangerouslySetInnerHTML","__html","content","pinned","prevMessages","newMessages","channelAPIURL","fetch","method","Content-Type","body","then","json","updatedMessage","updatedMessages","catch","togglePinMessage","aria-label","FaThumbtack","messagePayload","timestamp","Date","toISOString","post","UserNamePrompt","setUserName","setName","savedName","handleSubmit","App","setChannels","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.27c569df.chunk.js","sourcesContent":["// Displays list of channels\n\n// ChannelList.js\nimport React, { useState, useEffect } from 'react';\n \nimport './ChannelList.css';  \n\n\n\n\nconst ChannelList = ({ channels, setChannel }) => {\n  return (\n    <div className=\"channel-list\">\n      <h2 className=\"channel-list-title\">Available Channels</h2>\n      {channels.length > 0 ? (\n        <ul className=\"channel-list-items\">\n          {channels.map((channel) => (\n            <li\n              key={channel.id}\n              className=\"channel-item\"\n              onClick={() => {\n                console.log('Channel selected:', channel);\n                setChannel(channel);\n              }}\n            >\n              \n              <span className=\"channel-name\">{channel.name}</span>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className=\"no-channels-text\">No channels available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ChannelList;\n\n\n","import React, { useState } from 'react';\n\nconst MessageInput = ({ onSendMessage, channelName }) => {\n  const [message, setMessage] = useState('');\n\n  const handleSend = () => {\n    if (message.trim()) {\n      // Pass the channelName along with the message content to onSendMessage\n      onSendMessage(message, channelName); // Changed from channelId to channelName\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"message-input\">\n      <input\n        type=\"text\"\n        placeholder=\"Type a message\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  );\n};\n\nexport default MessageInput;\n\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MessageInput from './MessageInput';\nimport { FaThumbtack } from 'react-icons/fa'; // Import pin icon from react-icons\nimport './ChatWindow.css';\n\n//const API_URL = 'http://vm146.rz.uni-osnabrueck.de/u064/project3/aiweb_project03/channel.wsgi/'; // Uni server\n//const API_URL = channel.endpoint;\n\nconst ChatWindow = ({ channel, userName }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [seenUsers, setSeenUsers] = useState({});\n  //const API_URL = channel.endpoint;\n  const API_URL = channel.endpoint.replace(/\\/$/, ''); // Remove trailing slash if present\n\n  console.log('API URL:', API_URL);\n\n  useEffect(() => {\n    // Fetch messages from the server on component mount\n    const fetchMessages = async () => {\n      setLoading(true);\n      setError(null);\n  \n      const channelAPIURL = `${API_URL}/messages?channel=${channel.name}`;\n  \n      try {\n        const response = await axios.get(channel.endpoint, {\n          headers: {\n            'Authorization': 'authkey ' + channel.authkey, // Add the Authorization header\n          },\n        });\n        // Set messages received from the server\n        setMessages(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load messages');\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchMessages();\n  }, [channel]);\n  \n  useEffect(() => {\n    const savedMessages = localStorage.getItem('messages');\n    if (savedMessages) {\n      setMessages(JSON.parse(savedMessages));  // Restore messages from localStorage\n    }\n  }, []);  // Run this effect only once on component mount\n  \n   \n\n  const formatMessage = (message) => {\n    return message\n      .replace(/\\*([^*]+)\\*/g, '<i>$1</i>')  \n      .replace(/\\[nop\\](.*?)\\[\\/nop\\]/g, '<b>$1</b>') \n      .replace(/\\_\\_([^_]+)\\_\\_/g, '<u>$1</u>');  \n  };\n\n  //const authKey = '0987654321';\n  const authKey = channel.authKey;\n\n  const handleSendMessage = async (message, channelName) => {\n    const messagePayload = {\n      name: channelName,  // Pass the channel name here mp:: changed key to name from channel_name to match the server\n      sender: userName,        // Send the sender's name\n      content: message,        // Send the actual message content\n      timestamp: new Date().toISOString(),  // Timestamp of the message\n      pinned: false,  // New message default pin state\n    };\n    console.log('Sending message payload:', messagePayload); //debugging\n    try {\n      const response = await axios.post(`${API_URL}/messages`, messagePayload, {\n        headers: {\n          'Authorization': 'authkey ' + channel.authkey, // Add the Authorization header\n        },\n      });\n      console.log('Message sent successfully:', response.data);\n\n      // If the message was sent successfully, update the messages state\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          sender: userName,\n          content: message,\n          timestamp: new Date().toISOString(),\n          response: response.data.response, // Include the response from the server\n          pinned: false, // New message default pin state\n        },\n      ]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n    }\n  };\n\n  const togglePinMessage = async (index) => {\n    setMessages((prevMessages) => {\n      const newMessages = [...prevMessages];\n      const message = newMessages[index];\n  \n      // Only toggle if the message is not already pinned\n      if (message.pinned) {\n        console.log(\"Message already pinned, skipping toggle.\");\n        return prevMessages;\n      }\n  \n      // Toggle the pinned state locally\n      message.pinned = !message.pinned;\n      const channelAPIURL = `${API_URL}/messages?channel=${channel.name}`;\n      // Send a request to the backend to update the message\n      fetch(`${channelAPIURL}/update_message/${message.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },     \n        body: JSON.stringify({ pinned: message.pinned }),\n      })\n        .then((response) => response.json())\n        .then((updatedMessage) => {\n          console.log('Backend updated message:', updatedMessage);\n          // Optionally update the UI or state if necessary\n          setMessages((prevMessages) => {\n            const updatedMessages = [...prevMessages];\n            updatedMessages[index] = updatedMessage;  // Update the message with the backend response\n            return updatedMessages;\n          });\n        })\n        .catch((error) => {\n          console.error('Error updating message on the backend:', error);\n        });\n  \n      return newMessages;\n    });\n  };\n  \n  \n  useEffect(() => {\n    // Save messages to localStorage when messages state changes\n    if (messages.length > 0) {\n      localStorage.setItem('messages', JSON.stringify(messages));\n    }\n    console.log('Messages saved to localStorage:', messages);\n  }, [messages]);\n\n \n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <h3>{channel.name}</h3>\n      </div>\n      <div className=\"chat-messages\">\n        {loading && <div className=\"loading\">Loading...</div>}\n        {error && <div className=\"error\">{error}</div>}\n        {messages.map((msg, index) => (\n          <div key={index} className={`message-container ${msg.sender === userName ? 'user-message' : ''}`}>\n            {/* Display sender's name */}\n            {msg.sender && (\n              <div className={`message-sender ${msg.sender === 'plantbot' ? 'bot-sender' : ''}`}>\n                {msg.sender}\n              </div>\n            )}\n            {/* Message Content */}\n            <div className={`message ${msg.sender === userName ? 'user' : 'other'}`}>\n              <div className=\"message-content\" dangerouslySetInnerHTML={{ __html: formatMessage(msg.content) }} />\n            </div>\n\n            {/* Pin Button */}\n            <button className={`pin-button ${msg.pinned ? 'pinned' : ''}`} onClick={() => togglePinMessage(index)} aria-label=\"Pin message\"> <FaThumbtack /> </button>\n\n   \n            {/* Display bot's response (if any) */}\n            {msg.response && (\n              <div className=\"response\">\n                <span className=\"bot-label\">Plantbot: </span>\n                <span className=\"response-content\" dangerouslySetInnerHTML={{ __html: formatMessage(msg.response) }} />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <MessageInput onSendMessage={handleSendMessage} channelName={channel.name} />\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","// Displays a prompt for the user to enter their username\n\n// UserNamePrompt.js\nimport React, { useState, useEffect } from 'react';\n\nconst UserNamePrompt = ({ setUserName }) => {\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    const savedName = localStorage.getItem('userName');\n    if (savedName) {\n      setUserName(savedName);\n    }\n  }, [setUserName]);\n\n  const handleSubmit = () => {\n    if (name.trim()) {\n      localStorage.setItem('userName', name);\n      setUserName(name);\n    }\n  };\n\n  return (\n    <div className=\"username-prompt\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n};\n\nexport default UserNamePrompt;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ChannelList from './ChannelList';\nimport ChatWindow from './ChatWindow';\nimport UserNamePrompt from './UserNamePrompt';\nimport './App.css';\n// const API_URL = 'http://localhost:5555'; // Hub app URL\nconst API_URL = 'http://vm146.rz.uni-osnabrueck.de/hub';  //uni server hub\n\nconst App = () => {\n  const [userName, setUserName] = useState('');\n  const [channels, setChannels] = useState([]);  // State to store channels\n  const [channel, setChannel] = useState(null);  // State to store selected channel\n  \n  // Fetch channels from the hub app when the app loads\n  useEffect(() => {\n   // const authKey = '1234567890';\n    const authKey = 'Crr-K24d-2N'; // uni server auth key\n    axios.get(`${API_URL}/channels`, {\n      headers: {\n        'Authorization': `Bearer ${authKey}`  // Adjust as needed\n      }\n    })\n    .then(response => {\n      console.log('Fetched channels:', response.data.channels); \n      setChannels(response.data.channels); // Set channels state\n    })\n    .catch(error => {\n      console.error('Error fetching channels:', error);\n    });\n  }, []);\n\n  if (!userName) {\n    return <UserNamePrompt setUserName={setUserName} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Welcome, {userName}</h1>\n      <div className=\"channel-chat-container\">\n        <ChannelList channels={channels} setChannel={setChannel} />\n        {channel && <ChatWindow channel={channel} userName={userName} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}