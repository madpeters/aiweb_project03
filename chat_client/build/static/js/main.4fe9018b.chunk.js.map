{"version":3,"sources":["ChannelList.js","MessageInput.js","ChatWindow.js","UserNamePrompt.js","App.js","reportWebVitals.js","index.js"],"names":["ChannelList","_ref","channels","setChannel","React","createElement","className","length","map","channel","key","id","onClick","console","log","name","MessageInput","onSendMessage","channelName","message","setMessage","useState","type","placeholder","value","onChange","e","target","handleSend","trim","ChatWindow","userName","messages","setMessages","loading","setLoading","error","setError","API_URL","endpoint","replace","useEffect","fetchMessages","async","response","axios","get","headers","Authorization","authkey","params","data","intervalId","setInterval","clearInterval","formatMessage","msg","sender","dangerouslySetInnerHTML","__html","content","pinned","messageId","patch","Content-Type","togglePinMessage","aria-label","FaThumbtack","messagePayload","timestamp","Date","toISOString","post","UserNamePrompt","setUserName","setName","savedName","localStorage","getItem","handleSubmit","setItem","App","setChannels","then","catch","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4fe9018b.chunk.js","sourcesContent":["// Displays list of channels\n\n// ChannelList.js\nimport React, { useState, useEffect } from 'react';\n \nimport './ChannelList.css';  \n\n\n\n\nconst ChannelList = ({ channels, setChannel }) => {\n  return (\n    <div className=\"channel-list\">\n      <h2 className=\"channel-list-title\">Available Channels</h2>\n      {channels.length > 0 ? (\n        <ul className=\"channel-list-items\">\n          {channels.map((channel) => (\n            <li\n              key={channel.id}\n              className=\"channel-item\"\n              onClick={() => {\n                console.log('Channel selected:', channel);\n                setChannel(channel);\n              }}\n            >\n              \n              <span className=\"channel-name\">{channel.name}</span>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className=\"no-channels-text\">No channels available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default ChannelList;\n\n\n","import React, { useState } from 'react';\n\nconst MessageInput = ({ onSendMessage, channelName }) => {\n  const [message, setMessage] = useState('');\n\n  const handleSend = () => {\n    if (message.trim()) {\n      // Pass the channelName along with the message content to onSendMessage\n      onSendMessage(message, channelName); // Changed from channelId to channelName\n      setMessage('');\n    }\n  };\n\n  return (\n    <div className=\"message-input\">\n      <input\n        type=\"text\"\n        placeholder=\"Type a message\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n      />\n      <button onClick={handleSend}>Send</button>\n    </div>\n  );\n};\n\nexport default MessageInput;\n\n\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MessageInput from './MessageInput';\nimport { FaThumbtack } from 'react-icons/fa';\nimport './ChatWindow.css';\n\n//const API_URL = 'http://vm146.rz.uni-osnabrueck.de/u064/project3/aiweb_project03/channel.wsgi/'; // Uni server\n//const API_URL = channel.endpoint;\n\nconst ChatWindow = ({ channel, userName }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_URL = channel.endpoint.replace(/\\/$/, '');\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await axios.get(API_URL + '/messages', {\n          headers: { 'Authorization': 'authkey ' + channel.authkey },\n          params: { channel: channel.name },\n        });\n        setMessages(response.data);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n        setError('Failed to load messages');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMessages();\n    const intervalId = setInterval(fetchMessages, 5000); // Regelmäßig aktualisieren\n\n    return () => clearInterval(intervalId); // Intervall beim Unmounten löschen\n  }, [channel, API_URL]);\n\n  const formatMessage = (message) => {\n    return message\n      .replace(/\\*([^*]+)\\*/g, '<i>$1</i>')\n      .replace(/\\[nop\\](.*?)\\[\\/nop\\]/g, '<b>$1</b>')\n      .replace(/\\_\\_([^_]+)\\_\\_/g, '<u>$1</u>');\n  };\n\n  const handleSendMessage = async (message, channelName) => {\n    const messagePayload = {\n      name: channelName,\n      sender: userName,\n      content: message,\n      timestamp: new Date().toISOString(),\n      pinned: false,\n    };\n    try {\n      await axios.post(API_URL + '/messages', messagePayload, {\n        headers: { 'Authorization': 'authkey ' + channel.authkey },\n      });\n      // Nachrichten nach dem Senden neu abrufen\n      const response = await axios.get(API_URL + '/messages', {\n        headers: { 'Authorization': 'authkey ' + channel.authkey },\n        params: { channel: channel.name },\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message');\n    }\n  };\n\n  const togglePinMessage = async (messageId, pinned) => {\n    try {\n      await axios.patch(\n        API_URL + `/update_message/${messageId}`,\n        { pinned: !pinned },\n        { headers: { 'Content-Type': 'application/json' } }\n      );\n      // Nachrichten nach dem Pinnen neu abrufen\n      const response = await axios.get(API_URL + '/messages', {\n        headers: { 'Authorization': 'authkey ' + channel.authkey },\n        params: { channel: channel.name },\n      });\n      setMessages(response.data);\n    } catch (error) {\n      console.error('Error updating message:', error);\n      setError('Failed to update message');\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <h3>{channel.name}</h3>\n      </div>\n      <div className=\"chat-messages\">\n        {loading && <div className=\"loading\">Loading...</div>}\n        {error && <div className=\"error\">{error}</div>}\n        {messages.map((msg) => (\n          <div key={msg.id} className={`message-container ${msg.sender === userName ? 'user-message' : ''}`}>\n            {msg.sender && (\n              <div className={`message-sender ${msg.sender === 'plantbot' ? 'bot-sender' : ''}`}>\n                {msg.sender}\n              </div>\n            )}\n            <div className={`message ${msg.sender === userName ? 'user' : 'other'}`}>\n              <div className=\"message-content\" dangerouslySetInnerHTML={{ __html: formatMessage(msg.content) }} />\n            </div>\n            <button className={`pin-button ${msg.pinned ? 'pinned' : ''}`} onClick={() => togglePinMessage(msg.id, msg.pinned)} aria-label=\"Pin message\"> <FaThumbtack /> </button>\n            {msg.response && (\n              <div className=\"response\">\n                <span className=\"bot-label\">Plantbot: </span>\n                <span className=\"response-content\" dangerouslySetInnerHTML={{ __html: formatMessage(msg.response) }} />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <MessageInput onSendMessage={handleSendMessage} channelName={channel.name} />\n    </div>\n  );\n};\n\nexport default ChatWindow;","// Displays a prompt for the user to enter their username\n\n// UserNamePrompt.js\nimport React, { useState, useEffect } from 'react';\n\nconst UserNamePrompt = ({ setUserName }) => {\n  const [name, setName] = useState('');\n\n  useEffect(() => {\n    const savedName = localStorage.getItem('userName');\n    if (savedName) {\n      setUserName(savedName);\n    }\n  }, [setUserName]);\n\n  const handleSubmit = () => {\n    if (name.trim()) {\n      localStorage.setItem('userName', name);\n      setUserName(name);\n    }\n  };\n\n  return (\n    <div className=\"username-prompt\">\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  );\n};\n\nexport default UserNamePrompt;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ChannelList from './ChannelList';\nimport ChatWindow from './ChatWindow';\nimport UserNamePrompt from './UserNamePrompt';\nimport './App.css';\nconst API_URL = 'http://localhost:5555'; // Hub app URL\n// const API_URL = 'http://vm146.rz.uni-osnabrueck.de/hub';  //uni server hub\n\nconst App = () => {\n  const [userName, setUserName] = useState('');\n  const [channels, setChannels] = useState([]);  // State to store channels\n  const [channel, setChannel] = useState(null);  // State to store selected channel\n  \n  // Fetch channels from the hub app when the app loads\n  useEffect(() => {\n    const authKey = '1234567890';\n    // const authKey = 'Crr-K24d-2N'; // uni server auth key\n    axios.get(`${API_URL}/channels`, {\n      headers: {\n        'Authorization': `Bearer ${authKey}`  // Adjust as needed\n      }\n    })\n    .then(response => {\n      console.log('Fetched channels:', response.data.channels); \n      setChannels(response.data.channels); // Set channels state\n    })\n    .catch(error => {\n      console.error('Error fetching channels:', error);\n    });\n  }, []);\n\n  if (!userName) {\n    return <UserNamePrompt setUserName={setUserName} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <h1>Welcome, {userName}</h1>\n      <div className=\"channel-chat-container\">\n        <ChannelList channels={channels} setChannel={setChannel} />\n        {channel && <ChatWindow channel={channel} userName={userName} />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}